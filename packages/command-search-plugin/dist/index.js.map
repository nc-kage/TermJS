{"version":3,"file":"index.js","sources":["../src/CommandSearch/constants.ts","../src/CommandSearch/index.ts"],"sourcesContent":["export const PLUGIN_NAME = 'command-search-plugin';\nexport const SHOW_KEY_CODE = 9;\n","import '@term-js/autocomplete-plugin/dist/index.css';\n\nimport { Plugin, ITermInfo, IKeyboardShortcutsManager, ActionShortcutType } from '@term-js/term';\nimport { Autocomplete, IAutocomplete } from '@term-js/autocomplete-plugin';\n\nimport icon from './icon.html';\n\nimport ICommandSearch from '@CommandSearch/ICommandSearch';\nimport { PLUGIN_NAME, SHOW_KEY_CODE } from '@CommandSearch/constants';\n\nclass CommandSearch extends Plugin implements ICommandSearch {\n  public readonly name: string = PLUGIN_NAME;\n\n  private commandList: string[] = [];\n  public set commands(list: string[]) {\n    this.commandList = list;\n    this.setList();\n  }\n  public get commands(): string[] {\n    return this.commandList;\n  }\n\n  private autocomplete?: IAutocomplete;\n  private removeList?: () => void;\n  private readonly actionShortcut: ActionShortcutType = { code: SHOW_KEY_CODE };\n\n  constructor(actionShortcut?: ActionShortcutType) {\n    super();\n    if (actionShortcut) this.actionShortcut = actionShortcut;\n  }\n\n  public setTermInfo(termInfo: ITermInfo, keyboardShortcutsManager: IKeyboardShortcutsManager) {\n    super.setTermInfo(termInfo, keyboardShortcutsManager);\n    this.setAutocomplete();\n  }\n\n  public updateTermInfo(termInfo: ITermInfo) {\n    super.updateTermInfo(termInfo);\n  }\n\n  public clear() {\n    const { autocomplete } = this;\n    if (autocomplete) autocomplete.clear();\n    super.clear();\n  }\n\n  public destroy() {\n    this.clear();\n    super.destroy();\n  }\n\n  private setAutocomplete() {\n    const { termInfo } = this;\n    if (!termInfo) return;\n    const autocomplete = termInfo.pluginManager.getPlugin(Autocomplete);\n    if (autocomplete) return this.autocomplete = autocomplete as IAutocomplete;\n    this.autocomplete = new Autocomplete();\n    termInfo.pluginManager.register(this.autocomplete);\n  }\n\n  private setList() {\n    const { termInfo, removeList, autocomplete } = this;\n    if (!termInfo || !autocomplete) return;\n    if (removeList) removeList();\n    this.removeList = autocomplete.addList(this.commandList, this.actionShortcut, icon);\n  }\n}\n\nexport default CommandSearch;\n"],"names":["Plugin","Autocomplete"],"mappings":";;;;;;;;;AAAO,MAAM,WAAW,GAAG,uBAAuB,CAAC;AAC5C,MAAM,aAAa,GAAG,CAAC;;ACS9B,MAAM,aAAc,SAAQA,WAAM;IAgBhC,YAAY,cAAmC;QAC7C,KAAK,EAAE,CAAC;QAhBM,SAAI,GAAW,WAAW,CAAC;QAEnC,gBAAW,GAAa,EAAE,CAAC;QAWlB,mBAAc,GAAuB,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;QAI5E,IAAI,cAAc;YAAE,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;KAC1D;IAfD,IAAW,QAAQ,CAAC,IAAc;QAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,OAAO,EAAE,CAAC;KAChB;IACD,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;IAWM,WAAW,CAAC,QAAmB,EAAE,wBAAmD;QACzF,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;QACtD,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAEM,cAAc,CAAC,QAAmB;QACvC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;KAChC;IAEM,KAAK;QACV,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QAC9B,IAAI,YAAY;YAAE,YAAY,CAAC,KAAK,EAAE,CAAC;QACvC,KAAK,CAAC,KAAK,EAAE,CAAC;KACf;IAEM,OAAO;QACZ,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,KAAK,CAAC,OAAO,EAAE,CAAC;KACjB;IAEO,eAAe;QACrB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,QAAQ;YAAE,OAAO;QACtB,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,SAAS,CAACC,+BAAY,CAAC,CAAC;QACpE,IAAI,YAAY;YAAE,OAAO,IAAI,CAAC,YAAY,GAAG,YAA6B,CAAC;QAC3E,IAAI,CAAC,YAAY,GAAG,IAAIA,+BAAY,EAAE,CAAC;QACvC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACpD;IAEO,OAAO;QACb,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QACpD,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY;YAAE,OAAO;QACvC,IAAI,UAAU;YAAE,UAAU,EAAE,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;KACrF;;;;;"}